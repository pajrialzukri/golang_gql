package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"backend/graph/generated"
	"backend/graph/model"
	"backend/internal/patient"
	"context"
	"fmt"
)

// PatientCreate is the resolver for the patientCreate field.
func (r *mutationResolver) PatientCreate(ctx context.Context, data model.PatientInput) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: PatientCreate - patientCreate"))
}

// PatientUpdate is the resolver for the patientUpdate field.
func (r *mutationResolver) PatientUpdate(ctx context.Context, id *string, data model.PatientInput) (*model.Patient, error) {
	panic(fmt.Errorf("not implemented: PatientUpdate - patientUpdate"))
}

// PatientDelete is the resolver for the patientDelete field.
func (r *mutationResolver) PatientDelete(ctx context.Context, id *string) (bool, error) {
	panic(fmt.Errorf("not implemented: PatientDelete - patientDelete"))
}

// PatientGet is the resolver for the patientGet field.
func (r *queryResolver) PatientGet(ctx context.Context, id *string) ([]*model.Patient, error) {
	var ret []*model.Patient
	var patient patient.Patient
	res, err := patient.Get(id)
	if err != nil {
		return ret, err
	}
	ret = append(ret, res)
	return ret, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
